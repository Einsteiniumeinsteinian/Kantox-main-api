name: Deploy to ECR Repository
run-name: >
  ${{ github.sha }} - "${{ github.event_name == 'pull_request' && github.event.pull_request.title || github.event.head_commit.message }}"
on:
  pull_request:
    types:
      - closed
    branches:
      - Development
      - development
      - production
      - Production
      - main
      - feat/github-workflow
      - 'release*'
    paths-ignore:
      - '**/README.md'
      - 'docs'
      - '.dockerignore'
      - '.gitignore'

jobs:
  # application_code_test: (for application tests)
  #   name: Application Code Test
  #   uses: ./.github/workflows/application_code_test.yaml
  test_image_deployment: 
    name: Test Image Deployment
    # needs: application_code_test
    uses: ./.github/workflows/test_image_deployment.yaml
  re_tag_current_latest:
    name: Re-tag Current Dev Image from latest
    uses: ./.github/workflows/re_tag_current_image.yaml
    needs: test_image_deployment
    permissions:
      id-token: write
      contents: read
    with:
      AWS_ECR_REPOSITORY: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_ECR_REPOSITORY || vars.AWS_DEV_ECR_REPOSITORY }}
      AWS_REGION: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_REGION || vars.AWS_DEV_REGION }}
      IMAGE_TAG_SUFFIX: ${{ vars.IMAGE_TAG_SUFFIX || 'latest' }}
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  push_to_ecr:
    name: Push to Dev ecr registry
    needs: re_tag_current_latest
    uses: ./.github/workflows/push_image_to_ecr.yaml
    permissions:
      id-token: write
      contents: read
    with:
      IMAGE_TAG_SUFFIX: ${{ vars.IMAGE_TAG_SUFFIX || 'latest' }}
      ENVIRONMENT: ${{ github.event.pull_request.base.ref }}
      AWS_ECR_REPOSITORY: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_ECR_REPOSITORY || vars.AWS_DEV_ECR_REPOSITORY }}
      AWS_REGION: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_REGION || vars.AWS_DEV_REGION }}
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH || '.' }}
  git_ops:
    needs: push_to_ecr
    uses: ./.github/workflows/update-gitops.yaml
    with:
      APP_NAME: ${{ vars.APP_NAME }}
      AWS_ECR_REPOSITORY: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_ECR_REPOSITORY || vars.AWS_DEV_ECR_REPOSITORY }}
      AWS_REGION: ${{ github.event.pull_request.base.ref == 'production' && vars.AWS_PROD_REGION || vars.AWS_DEV_REGION }}
      GIT_OPS_REPOSITORY:  ${{ vars.GIT_OPS_REPOSITORY }}
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

  # notify-slack:
  #   name: Notify Slack
  #   needs: [application_code_test, test_image_deployment, re_tag_current_latest, push_to_ecr]
  #   if: always()
  #   uses: ./.github/workflows/notify-slack.yaml
  #   with:
  #     status: ${{ 
  #       needs.application_code_test.result == 'success' &&
  #       needs.test_image_deployment.result == 'success' &&
  #       needs.re_tag_current_latest.result == 'success' &&
  #       needs.push_to_ecr.result == 'success' 
  #       && 'success' || 'failure' 
  #      }}
  #     repository: ${{ github.repository }}
  #     branch: ${{ github.ref_name }}
  #     commit: ${{ github.sha }}
  #     actor: ${{ github.actor }}
  #     workflow: ${{ github.workflow }}
  #     run_id: ${{ github.run_id }}
  #     logs: > 
  #       ${{ needs.application_code_test.result == 'failure' && 'Application Code Test Failed\n' || '' }}
  #       ${{ needs.test_image_deployment.result == 'failure' && 'Test Image Deployment Failed\n' || '' }}
  #       ${{ needs.re_tag_current_latest.result == 'failure' && 'Re-tag Current Image Failed\n' || '' }}
  #       ${{ needs.push_to_ecr.result == 'failure' && 'Push to ECR Failed\n' || '' }}
  #     color: ${{ 
  #       needs.application_code_test.result == 'success' &&
  #       needs.test_image_deployment.result == 'success' &&
  #       needs.re_tag_current_latest.result == 'success' &&
  #       needs.push_to_ecr.result == 'success' 
  #       && '#36a64f' || '#ff0000' 
  #      }}
  #     message: ${{ 
  #       needs.application_code_test.result == 'success' &&
  #       needs.test_image_deployment.result == 'success' &&
  #       needs.re_tag_current_latest.result == 'success' &&
  #       needs.push_to_ecr.result == 'success' 
  #       && '✅ *Deployment Successful* ✅' || '❌ *Deployment Failed* ❌' 
  #       }}
  #   secrets:
  #     SLACK_WEBHOOK_URL: ${{ secrets.BUILD_SLACK_WEBHOOK_URL }}