name: Deploy Application to ECR

on:
  workflow_call:
    inputs:
      AWS_ECR_REPOSITORY:
        required: true
        type: string
        description: 'AWS ECR Repository name (without registry URL)'
      AWS_REGION:
        required: true
        type: string
        description: 'AWS Account Region'
      ENVIRONMENT:
        required: true
        type: string
        description: 'Deployment Environment'
      IMAGE_TAG_SUFFIX:
        required: false
        type: string
        description: 'Additional image tag to apply'
        default: 'latest'
      AWS_ROLE_ARN:
        required: true
        type: string
        description: 'AWS IAM Role ARN for OIDC authentication'
      AWS_ACCOUNT_ID:
        required: true
        type: string
        description: 'AWS Account ID'
      DOCKERFILE_PATH:
        required: false
        type: string
        description: 'Path to Dockerfile'
        default: '.'

jobs:
  push_to_ecr:
    runs-on: ubuntu-latest

    # Required for OIDC authentication
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE_ARN }}
          role-session-name: github-actions-ecr-deploy
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Verify AWS authentication
        run: |
          echo "🔐 Current AWS identity:"
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ inputs.AWS_ACCOUNT_ID }}

      - name: Check for existing image with current commit SHA
        id: check-image
        run: |
          set -e  # Exit on error
          set -o pipefail  # Fail if any part of a pipe fails

          echo "🔍 Checking for existing image with tag '${{ github.sha }}'..."

          # Check if image with current commit SHA already exists
          if aws ecr describe-images \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --no-cli-pager > /dev/null 2>&1; then
            
            echo "✅ Image with tag '${{ github.sha }}' already exists. Skipping build."
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
            
            # Get existing image details
            IMAGE_DETAILS=$(aws ecr describe-images \
              --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
              --region "${{ inputs.AWS_REGION }}" \
              --image-ids imageTag="${{ github.sha }}" \
              --query 'imageDetails[0].[imagePushedAt,imageSizeInBytes]' \
              --output table \
              --no-cli-pager)
            
            echo "Existing image details:"
            echo "$IMAGE_DETAILS"
            
          else
            echo "ℹ️ Image with tag '${{ github.sha }}' does not exist. Will build and push."
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Determine next version number
        id: determine-version
        run: |
          echo "🔢 Determining version number..."
          
          # Fetch all existing tags and extract version numbers
          ALL_TAGS=$(aws ecr describe-images \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --query 'imageDetails[].imageTags[]' \
            --output json 2>/dev/null | jq -r '.[]' 2>/dev/null || echo "")

          echo "Existing tags:"
          echo "$ALL_TAGS"

          # Extract version numbers (looking for patterns like v1, v2, etc.)
          LATEST_VERSION=$(echo "$ALL_TAGS" | grep -oP 'v\d+' | sed 's/v//' | sort -n | tail -n 1 || echo "0")

          # Use existing version if image exists, otherwise increment
          if [[ "${{ env.IMAGE_EXISTS }}" == "true" ]]; then
            VERSION="$LATEST_VERSION"
            echo "📦 Using existing version: v$VERSION"
          else
            VERSION=$((LATEST_VERSION + 1))
            echo "🆕 Next version will be: v$VERSION"
          fi

          # Export to GitHub environment
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: env.IMAGE_EXISTS == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        if: env.IMAGE_EXISTS == 'false'
        run: |
          echo "🏗️ Building Docker image..."
          
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ inputs.AWS_ECR_REPOSITORY }}:${{ github.sha }}"
          echo "Building image: $IMAGE_URI"
          
          docker build \
            --tag "$IMAGE_URI" \
            --platform linux/amd64 \
            ${{ inputs.DOCKERFILE_PATH }}
          
          echo "✅ Docker image built successfully"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        if: env.IMAGE_EXISTS == 'false'
        run: |
          echo "📤 Pushing Docker image to ECR..."
          
          docker push "${{ env.IMAGE_URI }}"
          
          echo "✅ Image pushed successfully with tag: ${{ github.sha }}"

      - name: Create and push environment-specific version tag
        if: env.IMAGE_EXISTS == 'false'
        run: |
          echo "🏷️ Creating environment-specific version tag..."
          
          # Create environment-specific tag
          ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          LOWER_CASE_ENVIRONMENT=$(echo "${ENVIRONMENT,,}")
          VERSION_TAG="${LOWER_CASE_ENVIRONMENT}-v${{ env.VERSION }}"
          
          echo "Creating tag: $VERSION_TAG"
          
          # Get the manifest of the image we just pushed
          IMAGE_MANIFEST=$(aws ecr batch-get-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'images[0].imageManifest' \
            --output text \
            --no-cli-pager)

          # Apply the version tag
          aws ecr put-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --image-tag "$VERSION_TAG" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-manifest "$IMAGE_MANIFEST" \
            --no-cli-pager

          echo "✅ Environment version tag created: $VERSION_TAG"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Apply additional image tag
        run: |
          echo "🏷️ Applying additional tag: ${{ inputs.IMAGE_TAG_SUFFIX }}"
          
          # Get the manifest of the base image
          IMAGE_MANIFEST=$(aws ecr batch-get-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'images[0].imageManifest' \
            --output text \
            --no-cli-pager)

          # Apply the additional tag
          aws ecr put-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --image-tag "${{ inputs.IMAGE_TAG_SUFFIX }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-manifest "$IMAGE_MANIFEST" \
            --no-cli-pager

          echo "✅ Additional tag applied: ${{ inputs.IMAGE_TAG_SUFFIX }}"

      - name: Verify final image tags
        run: |
          echo "📋 Verifying all tags for the deployed image..."
          
          # Get all tags for the current image
          IMAGE_TAGS=$(aws ecr describe-images \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'imageDetails[0].imageTags' \
            --output json \
            --no-cli-pager)

          echo "All tags for this image:"
          echo "$IMAGE_TAGS" | jq -r '.[]' | sort

      - name: Deployment summary
        run: |
          echo "🎉 ECR deployment completed successfully!"
          echo "📦 Repository: ${{ inputs.AWS_ECR_REPOSITORY }}"
          echo "🏷️ Primary tag: ${{ github.sha }}"
          if [[ "${{ env.IMAGE_EXISTS }}" == "false" ]]; then
            echo "🆕 New image built and pushed"
            echo "📊 Version tag: ${{ env.VERSION_TAG }}"
          else
            echo "♻️ Existing image reused"
          fi
          echo "🏷️ Additional tag: ${{ inputs.IMAGE_TAG_SUFFIX }}"
          echo "🌍 Region: ${{ inputs.AWS_REGION }}"
          echo "🚀 Environment: ${{ inputs.ENVIRONMENT }}"