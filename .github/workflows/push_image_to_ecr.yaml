name: Deploy Application to ECR

on:
  workflow_call:
    inputs:
      AWS_ECR_REPOSITORY:
        required: true
        type: string
        description: 'AWS ECR Repository'
      AWS_REGION:
        required: true
        type: string
        description: 'AWS Account Region'
      ENVIRONMENT:
        required: true
        type: string
        description: 'Deployment Environment'
      IMAGE_TAG_SUFFIX:
        required: true
        type: string
        description: 'IMAGE_TAG_NAME'
        default: 'latest'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_KEY:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  push_to_ecr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Check for Existing Image Tag
        id: check-image
        run: |
          set -e  # Exit on error
          set -o pipefail  # Fail if any part of a pipe fails

          # Fetch image manifest for 'latest' tag if it exists
          IMAGE_MANIFEST=$(aws ecr batch-get-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'images[0].imageManifest' \
            --output text \
             --no-cli-pager)

          echo "IMAGE_EXISTS: $IMAGE_MANIFEST"

          # Determine if the image exists and export to GitHub env
          if [ "$IMAGE_MANIFEST" != "None" ]; then
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
            echo "Image with tag 'latest' exists. Skipping building and pushing image. "
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
            echo "Image with tag 'latest' does not exist. "
          fi

      - name: Determine Image Version
        id: determine-version
        run: |
          # Fetch all tags and extract version numbers
          ALL_TAGS=$(aws ecr describe-images \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --query 'imageDetails[].imageTags' \
            --output json | jq -r '.[] | .[]')

          # Get the latest version or default to 0 if not found
          LATEST_VERSION=$(echo "$ALL_TAGS" | grep -oP 'v\d+' | sed 's/v//' | sort -n | tail -n 1 || echo "0")

          # Use existing version if image exists, else increment
          VERSION=$([[ "${{ env.IMAGE_EXISTS }}" == "true" ]] && echo "$LATEST_VERSION" || echo $((LATEST_VERSION + 1)))

          # Export to GitHub environment
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "Latest version: $LATEST_VERSION"
          echo "Selected version: $VERSION"

      - name: Login to ECR and Build Docker Image
        if: env.IMAGE_EXISTS == 'false'
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com

          # Build Docker Image
          IMAGE_NAME=${{ github.sha }}
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REPOSITORY }}:$IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV


      - name: Push Docker Image to ECR
        if: env.IMAGE_EXISTS == 'false'
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REPOSITORY }}:${{ env.IMAGE_NAME }}

      - name: Tag and Push Additional Tags to ECR
        if: env.IMAGE_EXISTS == 'false'
        run: |
          # Define multiple tags
          ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          LOWER_CASE_ENVIRONMENT=$(echo "${ENVIRONMENT,,}")
          echo "LOWER_CASE_ENVIRONMENT: $LOWER_CASE_ENVIRONMENT"

          TAGS=("$LOWER_CASE_ENVIRONMENT-v${{ env.VERSION }}")
          echo "TAGS: $TAGS"

          # Push image with each tag
          for TAG in "${TAGS[@]}"; do
            aws ecr put-image \
              --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
              --image-tag "$TAG" \
              --region "${{ inputs.AWS_REGION }}" \
              --image-manifest "$(aws ecr batch-get-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'images[0].imageManifest' \
            --output text \
             --no-cli-pager)" \
              --no-cli-pager
          done

      - name: Adding Tag IMAGE_TAG_SUFFIX to Image
        run: |
          # Add ${{ inputs.IMAGE_TAG_SUFFIX }} to image
            aws ecr put-image \
              --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
              --image-tag "${{ inputs.IMAGE_TAG_SUFFIX }}" \
              --region "${{ inputs.AWS_REGION }}" \
              --image-manifest "$(aws ecr batch-get-image \
            --repository-name "${{ inputs.AWS_ECR_REPOSITORY }}" \
            --region "${{ inputs.AWS_REGION }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'images[0].imageManifest' \
            --output text \
             --no-cli-pager)" \
              --no-cli-pager
