name: Deploy to EKS

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        type: string
        description: 'EKS cluster name'
      region:
        required: true
        type: string
        description: 'AWS region'
      deployment-name:
        required: true
        type: string
        description: 'Kubernetes deployment name'
      namespace:
        required: false
        type: string
        default: 'default'
        description: 'Kubernetes namespace'
      configmap-name:
        required: true
        type: string
        description: 'ConfigMap name to update'
      version-key:
        required: false
        type: string
        default: 'version'
        description: 'ConfigMap key for version parameter'
      image-tag:
        required: true
        type: string
        description: 'Docker image tag to deploy'
      ecr-repository:
        required: true
        type: string
        description: 'ECR repository URI'
    secrets:
      aws-role-arn:
        required: true
        description: 'AWS IAM Role ARN for OIDC authentication'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Required for OIDC authentication
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-session-name: github-actions-eks-deploy
        aws-region: ${{ inputs.region }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ inputs.region }} --name ${{ inputs.cluster-name }}

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Get current ConfigMap version
      id: get-version
      run: |
        CURRENT_VERSION=$(kubectl get configmap ${{ inputs.configmap-name }} -n ${{ inputs.namespace }} -o jsonpath='{.data.${{ inputs.version-key }}}' || echo "0")
        echo "Current version: $CURRENT_VERSION"
        NEW_VERSION=$((CURRENT_VERSION + 1))
        echo "New version: $NEW_VERSION"
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update deployment image
      run: |
        kubectl set image deployment/${{ inputs.deployment-name }} \
          ${{ inputs.deployment-name }}=${{ inputs.ecr-repository }}:${{ inputs.image-tag }} \
          -n ${{ inputs.namespace }}

    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/${{ inputs.deployment-name }} -n ${{ inputs.namespace }} --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get deployment ${{ inputs.deployment-name }} -n ${{ inputs.namespace }}
        kubectl get pods -l app=${{ inputs.deployment-name }} -n ${{ inputs.namespace }}

    - name: Update ConfigMap version
      run: |
        kubectl patch configmap ${{ inputs.configmap-name }} -n ${{ inputs.namespace }} \
          -p '{"data":{"${{ inputs.version-key }}":"${{ steps.get-version.outputs.new-version }}"}}'

    - name: Verify ConfigMap update
      run: |
        UPDATED_VERSION=$(kubectl get configmap ${{ inputs.configmap-name }} -n ${{ inputs.namespace }} -o jsonpath='{.data.${{ inputs.version-key }}}')
        echo "ConfigMap updated to version: $UPDATED_VERSION"
        if [ "$UPDATED_VERSION" != "${{ steps.get-version.outputs.new-version }}" ]; then
          echo "ERROR: ConfigMap version mismatch!"
          exit 1
        fi

    - name: Deployment summary
      run: |
        echo "âœ… Deployment successful!"
        echo "ðŸ“¦ Image: ${{ inputs.ecr-repository }}:${{ inputs.image-tag }}"
        echo "ðŸ”„ ConfigMap version updated: ${{ steps.get-version.outputs.current-version }} â†’ ${{ steps.get-version.outputs.new-version }}"